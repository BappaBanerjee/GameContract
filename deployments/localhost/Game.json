{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "Game_Not_Authorised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Game__Is_Busy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Not_a_player",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "skillup_max_limit_reached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "userRegistration__already_a_player",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_token",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "onDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_token",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "onWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum UserRegistration.Role",
          "name": "role",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "name": "userRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "userUnregisterd",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BattingSkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverDrive",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "straightDrive",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pull",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "squareCut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BowlingSkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yocker",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bouncer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lengthBall",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getPlayerDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum UserRegistration.Role",
              "name": "role",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "Id",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserRegistration.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "_getPlayerRole",
      "outputs": [
        {
          "internalType": "enum UserRegistration.Role",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "_isPlayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_skill",
          "type": "uint256"
        }
      ],
      "name": "practiceBowling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shot",
          "type": "uint256"
        }
      ],
      "name": "practiceShots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum UserRegistration.Role",
          "name": "_role",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "waiting_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdba1536f4e64e0ec4f7fcc28995ed9fa7ede863631ecc8c861d735f5bf46a807",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1879182",
    "logsBloom": "0x
    "blockHash": "0x7d5b1f3248bb3c5629af964473c14fd940339d8dff651cfc6fda73d90baf6cac",
    "transactionHash": "0xdba1536f4e64e0ec4f7fcc28995ed9fa7ede863631ecc8c861d735f5bf46a807",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1879182",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f8e0b931d5ef2991b0dd8799e0e1c6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Game_Not_Authorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Game__Is_Busy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_a_player\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"skillup_max_limit_reached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"userRegistration__already_a_player\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum UserRegistration.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"userRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userUnregisterd\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BattingSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverDrive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"straightDrive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pull\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squareCut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BowlingSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yocker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bouncer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lengthBall\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getPlayerDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"enum UserRegistration.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"}],\"internalType\":\"struct UserRegistration.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_getPlayerRole\",\"outputs\":[{\"internalType\":\"enum UserRegistration.Role\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_isPlayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_skill\",\"type\":\"uint256\"}],\"name\":\"practiceBowling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shot\",\"type\":\"uint256\"}],\"name\":\"practiceShots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum UserRegistration.Role\",\"name\":\"_role\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"waiting_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_getPlayerDetails()\":{\"details\":\"return the details of the player if registered\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Game.sol\":\"Game\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Game.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./UserRegistration.sol\\\";\\r\\nimport \\\"./Practice.sol\\\";\\r\\n\\r\\ncontract Game is UserRegistration, Practice {\\r\\n    //custom error\\r\\n    error Game_Not_Authorised(); //when non user tries to access\\r\\n    error Game__Is_Busy(); //throw error if user try to execute before particular interval\\r\\n\\r\\n    uint256 private constant TIME_LOCK_IN_SEC = 60; //Time lock user for certer amount of time for further execution\\r\\n    mapping(address => uint256) public waiting_time; //tracking user waiting time\\r\\n\\r\\n    //modifiers\\r\\n    modifier isBusy() {\\r\\n        if (block.timestamp < waiting_time[msg.sender]) revert Game__Is_Busy();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev register a user to the game. It call the functio _register from the userRegistration contract\\r\\n        @param user role, 0 for batsman and 1 for bowler and username of the user\\r\\n        requirement :- \\r\\n            role should be a 0 for batsman and 1 for bowler \\r\\n            username can be string\\r\\n        @event : emit the event userRegistered()\\r\\n    */\\r\\n    function register(Role _role, string memory _username) public {\\r\\n        _register(_role, _username);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev function to unregister a user\\r\\n        requirements :\\r\\n            **should be a already a user\\r\\n        @event : emit the event userUnregisterd()\\r\\n    */\\r\\n    function unRegister() public {\\r\\n        _unRegister();\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev skill up the particular shots\\r\\n        @param give the shot number \\r\\n            1 for coverdrive\\r\\n            2 for strightdrive\\r\\n            3 for pull shot\\r\\n            4 for squarecut\\r\\n        \\r\\n        requirements : \\r\\n            *has to be the batsman role\\r\\n            *shot number must be in range \\r\\n            *waiting time must be less than block.timestamp or 0\\r\\n    */\\r\\n    function practiceShots(uint256 _shot) public isBusy {\\r\\n        if (_getPlayerRole(msg.sender) != Role.Batsman)\\r\\n            revert Game_Not_Authorised();\\r\\n        require(_shot > 0 && _shot < 5, \\\"Invalid selection\\\");\\r\\n        waiting_time[msg.sender] = block.timestamp + TIME_LOCK_IN_SEC;\\r\\n        if (_shot == 1) {\\r\\n            _practiceCoverDrive();\\r\\n        } else if (_shot == 2) {\\r\\n            _practiceStraightDrive();\\r\\n        } else if (_shot == 3) {\\r\\n            _practicePull();\\r\\n        } else if (_shot == 4) {\\r\\n            _practiceSquareCut();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev skill up the particular shots\\r\\n        @param give the shot number \\r\\n            1 for yocker\\r\\n            2 for strightdrive\\r\\n            3 for pull shot\\r\\n            4 for squarecut\\r\\n        requirements : \\r\\n            *has to be the batsman role\\r\\n            *shot number must be in range \\r\\n            *waiting time must be less than block.timestamp or 0\\r\\n    */\\r\\n    function practiceBowling(uint256 _skill) public isBusy {\\r\\n        if (_getPlayerRole(msg.sender) != Role.Bowler)\\r\\n            revert Game_Not_Authorised();\\r\\n        require(_skill > 0 && _skill < 4, \\\"Invalid selection\\\");\\r\\n        waiting_time[msg.sender] = block.timestamp + TIME_LOCK_IN_SEC;\\r\\n        if (_skill == 1) {\\r\\n            _practiceYocker();\\r\\n        } else if (_skill == 2) {\\r\\n            _practiceBouncer();\\r\\n        } else if (_skill == 3) {\\r\\n            _practiceLengthBall();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event onDeposit(string _token, uint256 _quantity, address _from);\\r\\n    event onWithdraw(string _token, uint256 _quantity, address _to);\\r\\n\\r\\n    function deposit(uint256 _quantity) public {\\r\\n        require(_quantity > 0, \\\"quantity must be greater than 0\\\");\\r\\n        emit onDeposit(\\\"Ball\\\", _quantity, msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _quantity, address _address) public {\\r\\n        require(_quantity > 0, \\\"quantity must be greater than 0\\\");\\r\\n        emit onDeposit(\\\"Ball\\\", _quantity, _address);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf722e9e8eb949ca94e7f6eefa81868b0fbfa7e966d276ed035a17ddf0a101bb8\",\"license\":\"MIT\"},\"contracts/Practice.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract Practice {\\r\\n    //custom error\\r\\n    error skillup_max_limit_reached(uint limit); //throw error if the max limit of the skill reached\\r\\n\\r\\n    //variables\\r\\n    uint private constant MAX_SKILL_POINT = 10; //max limit of the skills\\r\\n\\r\\n    //data structure for the batting shots\\r\\n    struct Shots {\\r\\n        uint coverDrive;\\r\\n        uint straightDrive;\\r\\n        uint pull;\\r\\n        uint squareCut;\\r\\n    }\\r\\n    //data structure for the bowlig skills\\r\\n    struct Bowl {\\r\\n        uint yocker;\\r\\n        uint bouncer;\\r\\n        uint lengthBall;\\r\\n    }\\r\\n\\r\\n    mapping(address => Shots) public BattingSkill;\\r\\n    mapping(address => Bowl) public BowlingSkill;\\r\\n\\r\\n    /*\\r\\n        @dev function to check if the skill value reached the threshold value\\r\\n        @param the value of the skill\\r\\n        requiremt :\\r\\n            if the value is greater than the maximum value (MAX_SKILL_POINT) then it will revert the execution of the function\\r\\n    */\\r\\n    function checkLimit(uint value) private pure {\\r\\n        if (value >= MAX_SKILL_POINT) revert skillup_max_limit_reached(value);\\r\\n    }\\r\\n\\r\\n    //Batting shots\\r\\n    /*\\r\\n        @dev functions to level up individual batting shots skills by 1\\r\\n    */\\r\\n    function _practiceCoverDrive() internal {\\r\\n        Shots memory skill = BattingSkill[msg.sender];\\r\\n        checkLimit(skill.coverDrive);\\r\\n        skill.coverDrive += 1;\\r\\n        BattingSkill[msg.sender] = skill;\\r\\n    }\\r\\n\\r\\n    function _practiceStraightDrive() internal {\\r\\n        Shots memory skill = BattingSkill[msg.sender];\\r\\n        checkLimit(skill.straightDrive);\\r\\n        skill.straightDrive += 1;\\r\\n        BattingSkill[msg.sender] = skill;\\r\\n    }\\r\\n\\r\\n    function _practicePull() internal {\\r\\n        Shots memory skill = BattingSkill[msg.sender];\\r\\n        checkLimit(skill.pull);\\r\\n        skill.pull += 1;\\r\\n        BattingSkill[msg.sender] = skill;\\r\\n    }\\r\\n\\r\\n    function _practiceSquareCut() internal {\\r\\n        Shots memory skill = BattingSkill[msg.sender];\\r\\n        checkLimit(skill.squareCut);\\r\\n        skill.squareCut += 1;\\r\\n        BattingSkill[msg.sender] = skill;\\r\\n    }\\r\\n\\r\\n    //Bowler _practice\\r\\n    /*\\r\\n        @dev function to level up individual bowling skills by 1\\r\\n    */\\r\\n    function _practiceYocker() internal {\\r\\n        Bowl memory skill = BowlingSkill[msg.sender];\\r\\n        checkLimit(skill.yocker);\\r\\n        skill.yocker += 1;\\r\\n        BowlingSkill[msg.sender] = skill;\\r\\n    }\\r\\n\\r\\n    function _practiceBouncer() internal {\\r\\n        Bowl memory skill = BowlingSkill[msg.sender];\\r\\n        checkLimit(skill.bouncer);\\r\\n        skill.bouncer += 1;\\r\\n        BowlingSkill[msg.sender] = skill;\\r\\n    }\\r\\n\\r\\n    function _practiceLengthBall() internal {\\r\\n        Bowl memory skill = BowlingSkill[msg.sender];\\r\\n        checkLimit(skill.lengthBall);\\r\\n        skill.lengthBall += 1;\\r\\n        BowlingSkill[msg.sender] = skill;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xca50db5c4c6b131b8ba021eff6dc954f7bf794ae1515c09b200b0394cbd9246f\",\"license\":\"MIT\"},\"contracts/UserRegistration.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract UserRegistration{\\r\\n    //custom error \\r\\n    error userRegistration__already_a_player();//throw error if the user is already a user\\r\\n    error Not_a_player();//throw error if sender if not a player\\r\\n\\r\\n    //variables\\r\\n    uint private userId = 1000;//count for the user ID's\\r\\n    enum Role{//options for the role, the user can choose\\r\\n        Batsman,\\r\\n        Bowler\\r\\n    }\\r\\n    //data structure for the user\\r\\n    struct Player{\\r\\n        Role role;//batsman or bowler\\r\\n        string username;//username of the user\\r\\n        uint Id;//Id of the user\\r\\n    }\\r\\n    mapping(address=> Player) private playerDetails;\\r\\n    mapping(address=> bool) private isPlayer;\\r\\n\\r\\n    // all events declared here\\r\\n    event userRegistered(Role role, string username, uint userId);\\r\\n    event userUnregisterd(address userAddress);\\r\\n\\r\\n    //all function starts from here \\r\\n    /*\\r\\n        @dev function to register the user \\r\\n        @param role of the player and username of the player\\r\\n        requirement :- \\r\\n            role should be a 0 for batsman and 1 for bowler \\r\\n            username can be string\\r\\n        @event : emit the event userRegistered()\\r\\n    */\\r\\n    function _register(Role _role, string memory _username) internal{\\r\\n        if(isPlayer[msg.sender]) revert userRegistration__already_a_player();\\r\\n        playerDetails[msg.sender] = Player(\\r\\n            _role,\\r\\n            _username,\\r\\n            userId\\r\\n        );\\r\\n        isPlayer[msg.sender] = true;\\r\\n        ++userId;\\r\\n        emit userRegistered(_role , _username , userId);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev function to unregister a user\\r\\n        requirements :\\r\\n            **should be a already a user\\r\\n        @event : emit the event userUnregisterd()\\r\\n    */\\r\\n    function _unRegister() internal{\\r\\n        if(!isPlayer[msg.sender]) revert Not_a_player();\\r\\n        isPlayer[msg.sender] = false;\\r\\n        delete playerDetails[msg.sender];\\r\\n        emit userUnregisterd(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev return the details of the player if registered\\r\\n    */\\r\\n    function _getPlayerDetails() public view returns(Player memory) {\\r\\n        return playerDetails[msg.sender];\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev return if the player is listed or not\\r\\n        @param address of the user\\r\\n    */\\r\\n    function _isPlayer(address _address) public view returns(bool){\\r\\n        return isPlayer[_address];\\r\\n    }\\r\\n    /*\\r\\n        @dev returns the role of the player, mainly 0 for batsman and 1 for bowler\\r\\n        @param address of the user\\r\\n    */\\r\\n    function _getPlayerRole(address _address) public view returns(Role){\\r\\n        require(_isPlayer(_address) , \\\"Not a player\\\");\\r\\n        return playerDetails[_address].role;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4f15fd0933960d81a74f79c25eec90419d6a1c1d2110d00fd51565022199b200\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526103e860005534801561001657600080fd5b506120c1806100266000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c8063b6b55f2511610071578063b6b55f2514610191578063b79475b0146101ad578063c61d2f53146101c9578063d3eb9541146101e5578063e32e7db314610201578063f242508c14610231576100b3565b8062f714ce146100b85780630392b558146100d457806326d7b3b4146100f2578063398cedf4146100fc5780635668e0171461012c57806365a7f6aa1461015e575b600080fd5b6100d260048036038101906100cd91906115a6565b610261565b005b6100dc6102e1565b6040516100e9919061174c565b60405180910390f35b6100fa61040f565b005b6101166004803603810190610111919061176e565b610419565b60405161012391906117b6565b60405180910390f35b6101466004803603810190610141919061176e565b61046f565b604051610155939291906117e0565b60405180910390f35b6101786004803603810190610173919061176e565b610499565b6040516101889493929190611817565b60405180910390f35b6101ab60048036038101906101a6919061185c565b6104c9565b005b6101c760048036038101906101c2919061185c565b610548565b005b6101e360048036038101906101de919061185c565b610705565b005b6101ff60048036038101906101fa91906119e3565b6108d9565b005b61021b6004803603810190610216919061176e565b6108e7565b6040516102289190611a4e565b60405180910390f35b61024b6004803603810190610246919061176e565b610988565b6040516102589190611a69565b60405180910390f35b600082116102a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029b90611ae1565b60405180910390fd5b7f3aee385c127b75a7c258e7b4701d1c40c2394018ab1a5933c138e0b774326c7582826040516102d5929190611b5c565b60405180910390a15050565b6102e961146e565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff166001811115610358576103576115e6565b5b600181111561036a576103696115e6565b5b815260200160018201805461037e90611bc7565b80601f01602080910402602001604051908101604052809291908181526020018280546103aa90611bc7565b80156103f75780601f106103cc576101008083540402835291602001916103f7565b820191906000526020600020905b8154815290600101906020018083116103da57829003601f168201915b50505050508152602001600282015481525050905090565b6104176109a0565b565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60046020528060005260406000206000915090508060000154908060010154908060020154905083565b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b6000811161050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390611ae1565b60405180910390fd5b7f3aee385c127b75a7c258e7b4701d1c40c2394018ab1a5933c138e0b774326c75813360405161053d929190611b5c565b60405180910390a150565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544210156105c1576040517f8feff8a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808111156105d4576105d36115e6565b5b6105dd336108e7565b60018111156105ef576105ee6115e6565b5b14610626576040517ff025011900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811180156106365750600481105b610675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066c90611c44565b60405180910390fd5b603c426106829190611c93565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600181036106da576106d5610b22565b610702565b600281036106ef576106ea610c19565b610701565b60038103610700576106ff610d10565b5b5b5b50565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442101561077e576040517f8feff8a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610792576107916115e6565b5b61079b336108e7565b60018111156107ad576107ac6115e6565b5b146107e4576040517ff025011900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811180156107f45750600581105b610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a90611c44565b60405180910390fd5b603c426108409190611c93565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001810361089857610893610e07565b6108d6565b600281036108ad576108a8610f12565b6108d5565b600381036108c2576108bd61101d565b6108d4565b600481036108d3576108d2611128565b5b5b5b5b50565b6108e38282611233565b5050565b60006108f282610419565b610931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092890611d13565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169050919050565b60056020528060005260406000206000915090505481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a23576040517fdd206f1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549060ff0219169055600182016000610adf91906114a1565b600282016000905550507fab1615e4137dbb2f3ecccb3bcdb710a7ffc83f1d8068560f78a087559548784333604051610b189190611d33565b60405180910390a1565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050610b9b8160000151611426565b600181600001818151610bae9190611c93565b9150818152505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050610c928160200151611426565b600181602001818151610ca59190611c93565b9150818152505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050610d898160400151611426565b600181604001818151610d9c9190611c93565b9150818152505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050610e8a8160000151611426565b600181600001818151610e9d9190611c93565b9150818152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050610f958160200151611426565b600181602001818151610fa89190611c93565b9150818152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506110a08160400151611426565b6001816040018181516110b39190611c93565b9150818152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506111ab8160600151611426565b6001816060018181516111be9190611c93565b9150818152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156112b7576040517f4267e80300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180606001604052808360018111156112d5576112d46115e6565b5b8152602001828152602001600054815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360018111156113505761134f6115e6565b5b0217905550602082015181600101908161136a9190611efa565b50604082015181600201559050506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008081546113de90611fcc565b919050819055507f9d581dea6935a568b6f189b19ec85394df7057f8946c81f6bd7cad9bba152512828260005460405161141a9392919061204d565b60405180910390a15050565b600a811061146b57806040517f0733413c0000000000000000000000000000000000000000000000000000000081526004016114629190611a69565b60405180910390fd5b50565b60405180606001604052806000600181111561148d5761148c6115e6565b5b815260200160608152602001600081525090565b5080546114ad90611bc7565b6000825580601f106114bf57506114de565b601f0160209004906000526020600020908101906114dd91906114e1565b5b50565b5b808211156114fa5760008160009055506001016114e2565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61152581611512565b811461153057600080fd5b50565b6000813590506115428161151c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061157382611548565b9050919050565b61158381611568565b811461158e57600080fd5b50565b6000813590506115a08161157a565b92915050565b600080604083850312156115bd576115bc611508565b5b60006115cb85828601611533565b92505060206115dc85828601611591565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611626576116256115e6565b5b50565b600081905061163782611615565b919050565b600061164782611629565b9050919050565b6116578161163c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561169757808201518184015260208101905061167c565b60008484015250505050565b6000601f19601f8301169050919050565b60006116bf8261165d565b6116c98185611668565b93506116d9818560208601611679565b6116e2816116a3565b840191505092915050565b6116f681611512565b82525050565b6000606083016000830151611714600086018261164e565b506020830151848203602086015261172c82826116b4565b915050604083015161174160408601826116ed565b508091505092915050565b6000602082019050818103600083015261176681846116fc565b905092915050565b60006020828403121561178457611783611508565b5b600061179284828501611591565b91505092915050565b60008115159050919050565b6117b08161179b565b82525050565b60006020820190506117cb60008301846117a7565b92915050565b6117da81611512565b82525050565b60006060820190506117f560008301866117d1565b61180260208301856117d1565b61180f60408301846117d1565b949350505050565b600060808201905061182c60008301876117d1565b61183960208301866117d1565b61184660408301856117d1565b61185360608301846117d1565b95945050505050565b60006020828403121561187257611871611508565b5b600061188084828501611533565b91505092915050565b6002811061189657600080fd5b50565b6000813590506118a881611889565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118f0826116a3565b810181811067ffffffffffffffff8211171561190f5761190e6118b8565b5b80604052505050565b60006119226114fe565b905061192e82826118e7565b919050565b600067ffffffffffffffff82111561194e5761194d6118b8565b5b611957826116a3565b9050602081019050919050565b82818337600083830152505050565b600061198661198184611933565b611918565b9050828152602081018484840111156119a2576119a16118b3565b5b6119ad848285611964565b509392505050565b600082601f8301126119ca576119c96118ae565b5b81356119da848260208601611973565b91505092915050565b600080604083850312156119fa576119f9611508565b5b6000611a0885828601611899565b925050602083013567ffffffffffffffff811115611a2957611a2861150d565b5b611a35858286016119b5565b9150509250929050565b611a488161163c565b82525050565b6000602082019050611a636000830184611a3f565b92915050565b6000602082019050611a7e60008301846117d1565b92915050565b600082825260208201905092915050565b7f7175616e74697479206d7573742062652067726561746572207468616e203000600082015250565b6000611acb601f83611a84565b9150611ad682611a95565b602082019050919050565b60006020820190508181036000830152611afa81611abe565b9050919050565b7f42616c6c00000000000000000000000000000000000000000000000000000000600082015250565b6000611b37600483611a84565b9150611b4282611b01565b602082019050919050565b611b5681611568565b82525050565b60006060820190508181036000830152611b7581611b2a565b9050611b8460208301856117d1565b611b916040830184611b4d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611bdf57607f821691505b602082108103611bf257611bf1611b98565b5b50919050565b7f496e76616c69642073656c656374696f6e000000000000000000000000000000600082015250565b6000611c2e601183611a84565b9150611c3982611bf8565b602082019050919050565b60006020820190508181036000830152611c5d81611c21565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c9e82611512565b9150611ca983611512565b9250828201905080821115611cc157611cc0611c64565b5b92915050565b7f4e6f74206120706c617965720000000000000000000000000000000000000000600082015250565b6000611cfd600c83611a84565b9150611d0882611cc7565b602082019050919050565b60006020820190508181036000830152611d2c81611cf0565b9050919050565b6000602082019050611d486000830184611b4d565b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611db07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d73565b611dba8683611d73565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611df7611df2611ded84611512565b611dd2565b611512565b9050919050565b6000819050919050565b611e1183611ddc565b611e25611e1d82611dfe565b848454611d80565b825550505050565b600090565b611e3a611e2d565b611e45818484611e08565b505050565b5b81811015611e6957611e5e600082611e32565b600181019050611e4b565b5050565b601f821115611eae57611e7f81611d4e565b611e8884611d63565b81016020851015611e97578190505b611eab611ea385611d63565b830182611e4a565b50505b505050565b600082821c905092915050565b6000611ed160001984600802611eb3565b1980831691505092915050565b6000611eea8383611ec0565b9150826002028217905092915050565b611f038261165d565b67ffffffffffffffff811115611f1c57611f1b6118b8565b5b611f268254611bc7565b611f31828285611e6d565b600060209050601f831160018114611f645760008415611f52578287015190505b611f5c8582611ede565b865550611fc4565b601f198416611f7286611d4e565b60005b82811015611f9a57848901518255600182019150602085019450602081019050611f75565b86831015611fb75784890151611fb3601f891682611ec0565b8355505b6001600288020188555050505b505050505050565b6000611fd782611512565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361200957612008611c64565b5b600182019050919050565b600061201f8261165d565b6120298185611a84565b9350612039818560208601611679565b612042816116a3565b840191505092915050565b60006060820190506120626000830186611a3f565b81810360208301526120748185612014565b905061208360408301846117d1565b94935050505056fea2646970667358221220e734ae14fc6bd15c5da11ce4276af7ec57e759c33150e748cbaaa5d8874424e464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b35760003560e01c8063b6b55f2511610071578063b6b55f2514610191578063b79475b0146101ad578063c61d2f53146101c9578063d3eb9541146101e5578063e32e7db314610201578063f242508c14610231576100b3565b8062f714ce146100b85780630392b558146100d457806326d7b3b4146100f2578063398cedf4146100fc5780635668e0171461012c57806365a7f6aa1461015e575b600080fd5b6100d260048036038101906100cd91906115a6565b610261565b005b6100dc6102e1565b6040516100e9919061174c565b60405180910390f35b6100fa61040f565b005b6101166004803603810190610111919061176e565b610419565b60405161012391906117b6565b60405180910390f35b6101466004803603810190610141919061176e565b61046f565b604051610155939291906117e0565b60405180910390f35b6101786004803603810190610173919061176e565b610499565b6040516101889493929190611817565b60405180910390f35b6101ab60048036038101906101a6919061185c565b6104c9565b005b6101c760048036038101906101c2919061185c565b610548565b005b6101e360048036038101906101de919061185c565b610705565b005b6101ff60048036038101906101fa91906119e3565b6108d9565b005b61021b6004803603810190610216919061176e565b6108e7565b6040516102289190611a4e565b60405180910390f35b61024b6004803603810190610246919061176e565b610988565b6040516102589190611a69565b60405180910390f35b600082116102a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029b90611ae1565b60405180910390fd5b7f3aee385c127b75a7c258e7b4701d1c40c2394018ab1a5933c138e0b774326c7582826040516102d5929190611b5c565b60405180910390a15050565b6102e961146e565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff166001811115610358576103576115e6565b5b600181111561036a576103696115e6565b5b815260200160018201805461037e90611bc7565b80601f01602080910402602001604051908101604052809291908181526020018280546103aa90611bc7565b80156103f75780601f106103cc576101008083540402835291602001916103f7565b820191906000526020600020905b8154815290600101906020018083116103da57829003601f168201915b50505050508152602001600282015481525050905090565b6104176109a0565b565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60046020528060005260406000206000915090508060000154908060010154908060020154905083565b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b6000811161050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390611ae1565b60405180910390fd5b7f3aee385c127b75a7c258e7b4701d1c40c2394018ab1a5933c138e0b774326c75813360405161053d929190611b5c565b60405180910390a150565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544210156105c1576040517f8feff8a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808111156105d4576105d36115e6565b5b6105dd336108e7565b60018111156105ef576105ee6115e6565b5b14610626576040517ff025011900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811180156106365750600481105b610675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066c90611c44565b60405180910390fd5b603c426106829190611c93565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600181036106da576106d5610b22565b610702565b600281036106ef576106ea610c19565b610701565b60038103610700576106ff610d10565b5b5b5b50565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442101561077e576040517f8feff8a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610792576107916115e6565b5b61079b336108e7565b60018111156107ad576107ac6115e6565b5b146107e4576040517ff025011900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811180156107f45750600581105b610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a90611c44565b60405180910390fd5b603c426108409190611c93565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001810361089857610893610e07565b6108d6565b600281036108ad576108a8610f12565b6108d5565b600381036108c2576108bd61101d565b6108d4565b600481036108d3576108d2611128565b5b5b5b5b50565b6108e38282611233565b5050565b60006108f282610419565b610931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092890611d13565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169050919050565b60056020528060005260406000206000915090505481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a23576040517fdd206f1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549060ff0219169055600182016000610adf91906114a1565b600282016000905550507fab1615e4137dbb2f3ecccb3bcdb710a7ffc83f1d8068560f78a087559548784333604051610b189190611d33565b60405180910390a1565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050610b9b8160000151611426565b600181600001818151610bae9190611c93565b9150818152505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050610c928160200151611426565b600181602001818151610ca59190611c93565b9150818152505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050610d898160400151611426565b600181604001818151610d9c9190611c93565b9150818152505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050610e8a8160000151611426565b600181600001818151610e9d9190611c93565b9150818152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050610f958160200151611426565b600181602001818151610fa89190611c93565b9150818152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506110a08160400151611426565b6001816040018181516110b39190611c93565b9150818152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506111ab8160600151611426565b6001816060018181516111be9190611c93565b9150818152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156112b7576040517f4267e80300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180606001604052808360018111156112d5576112d46115e6565b5b8152602001828152602001600054815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360018111156113505761134f6115e6565b5b0217905550602082015181600101908161136a9190611efa565b50604082015181600201559050506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008081546113de90611fcc565b919050819055507f9d581dea6935a568b6f189b19ec85394df7057f8946c81f6bd7cad9bba152512828260005460405161141a9392919061204d565b60405180910390a15050565b600a811061146b57806040517f0733413c0000000000000000000000000000000000000000000000000000000081526004016114629190611a69565b60405180910390fd5b50565b60405180606001604052806000600181111561148d5761148c6115e6565b5b815260200160608152602001600081525090565b5080546114ad90611bc7565b6000825580601f106114bf57506114de565b601f0160209004906000526020600020908101906114dd91906114e1565b5b50565b5b808211156114fa5760008160009055506001016114e2565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61152581611512565b811461153057600080fd5b50565b6000813590506115428161151c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061157382611548565b9050919050565b61158381611568565b811461158e57600080fd5b50565b6000813590506115a08161157a565b92915050565b600080604083850312156115bd576115bc611508565b5b60006115cb85828601611533565b92505060206115dc85828601611591565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611626576116256115e6565b5b50565b600081905061163782611615565b919050565b600061164782611629565b9050919050565b6116578161163c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561169757808201518184015260208101905061167c565b60008484015250505050565b6000601f19601f8301169050919050565b60006116bf8261165d565b6116c98185611668565b93506116d9818560208601611679565b6116e2816116a3565b840191505092915050565b6116f681611512565b82525050565b6000606083016000830151611714600086018261164e565b506020830151848203602086015261172c82826116b4565b915050604083015161174160408601826116ed565b508091505092915050565b6000602082019050818103600083015261176681846116fc565b905092915050565b60006020828403121561178457611783611508565b5b600061179284828501611591565b91505092915050565b60008115159050919050565b6117b08161179b565b82525050565b60006020820190506117cb60008301846117a7565b92915050565b6117da81611512565b82525050565b60006060820190506117f560008301866117d1565b61180260208301856117d1565b61180f60408301846117d1565b949350505050565b600060808201905061182c60008301876117d1565b61183960208301866117d1565b61184660408301856117d1565b61185360608301846117d1565b95945050505050565b60006020828403121561187257611871611508565b5b600061188084828501611533565b91505092915050565b6002811061189657600080fd5b50565b6000813590506118a881611889565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118f0826116a3565b810181811067ffffffffffffffff8211171561190f5761190e6118b8565b5b80604052505050565b60006119226114fe565b905061192e82826118e7565b919050565b600067ffffffffffffffff82111561194e5761194d6118b8565b5b611957826116a3565b9050602081019050919050565b82818337600083830152505050565b600061198661198184611933565b611918565b9050828152602081018484840111156119a2576119a16118b3565b5b6119ad848285611964565b509392505050565b600082601f8301126119ca576119c96118ae565b5b81356119da848260208601611973565b91505092915050565b600080604083850312156119fa576119f9611508565b5b6000611a0885828601611899565b925050602083013567ffffffffffffffff811115611a2957611a2861150d565b5b611a35858286016119b5565b9150509250929050565b611a488161163c565b82525050565b6000602082019050611a636000830184611a3f565b92915050565b6000602082019050611a7e60008301846117d1565b92915050565b600082825260208201905092915050565b7f7175616e74697479206d7573742062652067726561746572207468616e203000600082015250565b6000611acb601f83611a84565b9150611ad682611a95565b602082019050919050565b60006020820190508181036000830152611afa81611abe565b9050919050565b7f42616c6c00000000000000000000000000000000000000000000000000000000600082015250565b6000611b37600483611a84565b9150611b4282611b01565b602082019050919050565b611b5681611568565b82525050565b60006060820190508181036000830152611b7581611b2a565b9050611b8460208301856117d1565b611b916040830184611b4d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611bdf57607f821691505b602082108103611bf257611bf1611b98565b5b50919050565b7f496e76616c69642073656c656374696f6e000000000000000000000000000000600082015250565b6000611c2e601183611a84565b9150611c3982611bf8565b602082019050919050565b60006020820190508181036000830152611c5d81611c21565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c9e82611512565b9150611ca983611512565b9250828201905080821115611cc157611cc0611c64565b5b92915050565b7f4e6f74206120706c617965720000000000000000000000000000000000000000600082015250565b6000611cfd600c83611a84565b9150611d0882611cc7565b602082019050919050565b60006020820190508181036000830152611d2c81611cf0565b9050919050565b6000602082019050611d486000830184611b4d565b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611db07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d73565b611dba8683611d73565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611df7611df2611ded84611512565b611dd2565b611512565b9050919050565b6000819050919050565b611e1183611ddc565b611e25611e1d82611dfe565b848454611d80565b825550505050565b600090565b611e3a611e2d565b611e45818484611e08565b505050565b5b81811015611e6957611e5e600082611e32565b600181019050611e4b565b5050565b601f821115611eae57611e7f81611d4e565b611e8884611d63565b81016020851015611e97578190505b611eab611ea385611d63565b830182611e4a565b50505b505050565b600082821c905092915050565b6000611ed160001984600802611eb3565b1980831691505092915050565b6000611eea8383611ec0565b9150826002028217905092915050565b611f038261165d565b67ffffffffffffffff811115611f1c57611f1b6118b8565b5b611f268254611bc7565b611f31828285611e6d565b600060209050601f831160018114611f645760008415611f52578287015190505b611f5c8582611ede565b865550611fc4565b601f198416611f7286611d4e565b60005b82811015611f9a57848901518255600182019150602085019450602081019050611f75565b86831015611fb75784890151611fb3601f891682611ec0565b8355505b6001600288020188555050505b505050505050565b6000611fd782611512565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361200957612008611c64565b5b600182019050919050565b600061201f8261165d565b6120298185611a84565b9350612039818560208601611679565b612042816116a3565b840191505092915050565b60006060820190506120626000830186611a3f565b81810360208301526120748185612014565b905061208360408301846117d1565b94935050505056fea2646970667358221220e734ae14fc6bd15c5da11ce4276af7ec57e759c33150e748cbaaa5d8874424e464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_getPlayerDetails()": {
        "details": "return the details of the player if registered"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 517,
        "contract": "contracts/Game.sol:Game",
        "label": "userId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 533,
        "contract": "contracts/Game.sol:Game",
        "label": "playerDetails",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Player)528_storage)"
      },
      {
        "astId": 537,
        "contract": "contracts/Game.sol:Game",
        "label": "isPlayer",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 278,
        "contract": "contracts/Game.sol:Game",
        "label": "BattingSkill",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Shots)266_storage)"
      },
      {
        "astId": 283,
        "contract": "contracts/Game.sol:Game",
        "label": "BowlingSkill",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Bowl)273_storage)"
      },
      {
        "astId": 18,
        "contract": "contracts/Game.sol:Game",
        "label": "waiting_time",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Role)520": {
        "encoding": "inplace",
        "label": "enum UserRegistration.Role",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Bowl)273_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Practice.Bowl)",
        "numberOfBytes": "32",
        "value": "t_struct(Bowl)273_storage"
      },
      "t_mapping(t_address,t_struct(Player)528_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserRegistration.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)528_storage"
      },
      "t_mapping(t_address,t_struct(Shots)266_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Practice.Shots)",
        "numberOfBytes": "32",
        "value": "t_struct(Shots)266_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bowl)273_storage": {
        "encoding": "inplace",
        "label": "struct Practice.Bowl",
        "members": [
          {
            "astId": 268,
            "contract": "contracts/Game.sol:Game",
            "label": "yocker",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 270,
            "contract": "contracts/Game.sol:Game",
            "label": "bouncer",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 272,
            "contract": "contracts/Game.sol:Game",
            "label": "lengthBall",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Player)528_storage": {
        "encoding": "inplace",
        "label": "struct UserRegistration.Player",
        "members": [
          {
            "astId": 523,
            "contract": "contracts/Game.sol:Game",
            "label": "role",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Role)520"
          },
          {
            "astId": 525,
            "contract": "contracts/Game.sol:Game",
            "label": "username",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 527,
            "contract": "contracts/Game.sol:Game",
            "label": "Id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Shots)266_storage": {
        "encoding": "inplace",
        "label": "struct Practice.Shots",
        "members": [
          {
            "astId": 259,
            "contract": "contracts/Game.sol:Game",
            "label": "coverDrive",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 261,
            "contract": "contracts/Game.sol:Game",
            "label": "straightDrive",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 263,
            "contract": "contracts/Game.sol:Game",
            "label": "pull",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 265,
            "contract": "contracts/Game.sol:Game",
            "label": "squareCut",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}